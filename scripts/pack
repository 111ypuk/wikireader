#!/bin/sh
# use 7zip to package the contents of image/*pedia

ERROR()
{
  echo error: $*
  exit 1
}

USAGE()
{
  [ -z "$1" ] || echo error: $*
  echo usage: $(basename "$0") '<options>'
  echo '       --help           -h         this message'
  echo '       --verbose        -v         more messages'
  echo '       --packages=<dir> -p <dir>   directory for 7zipped files ['${packages}']'
  echo '       --image=<dir>    -i <dir>   image source directory ['${image}']'
  echo '       --url=<url>      -u <url>   base url for HTML file ['${url}']'
  echo '       --size=<n>       -s <n>     7zip splitting factor (number[kmg]) ['${size}']'
  echo '       --pretty         -P         pretty print the HTML'
  exit 1
}


nlsprint=$(readlink -m "$(dirname "$0")/../samo-lib/scripts/nls-print")
verbose=no
packages="packages/$(date '+%Y%m%d')"
image=image
url=http://wrmlbeta.s3.amazonaws.com
size=1g
pretty=no

debug=no

getopt=/usr/local/bin/getopt
[ -x "${getopt}" ] || getopt=getopt
args=$(${getopt} -o hvp:i:t:s:u: --long=help,verbose,packages:,image:,tracker:,url:,size:,debug -- "$@") ||exit 1

# replace the arguments with the parsed values
eval set -- "${args}"

while :
do
  case "$1" in
    -v|--verbose)
      verbose=yes
      shift
      ;;

    -p|--packages)
      packages="$2"
      shift 2
      ;;

    -i|--image)
      image="$2"
      shift 2
      ;;

    -u|--url)
      url="$2"
      shift 2
      ;;

    -s|--size)
      size="$2"
      shift 2
      ;;

    -P|--pretty)
      pretty=yes
      shift
      ;;

    --debug)
      debug=yes
      shift
      ;;

    --)
      shift
      break
      ;;

    -h|--help)
      USAGE
      ;;

    *)
      USAGE invalid option: $1
      ;;
  esac
done

# verify arguments
[ -z "${packages}" ] && USAGE packages is not set
[ -z "${image}" ] && USAGE image is not set
[ -z "${url}" ] && USAGE url is not set
[ -z "${size}" ] && USAGE size is not set
[ $# -ne 0 ] && USAGE extraneous extra arguments

# absolute path to directories
packages=$(readlink -m "${packages}")
image=$(readlink -m "${image}")

# all possible type of content
all_types='books dict pedia quote'
TypeToName()
{
  local type="$1"; shift
  case "${type}" in
    books)
      echo wikibooks
      ;;
    dict)
      echo wiktionary
      ;;
    pedia)
      echo wikipedia
      ;;
    quote)
      echo wikiquote
      ;;
    *)
      echo unknown
      ;;
  esac
}

# create and check directories directory
mkdir -p "${packages}"
[ -d "${packages}" ] || ERROR ${packages} is not a directory

cd "${image}" || ERROR image directory: ${image} not found

# setup for HTML output
HTMLFileName="${packages}/packages.html"
rm -f "${HTMLFileName}"

# output HTML
HTMLoutput()
{
  local indent
  indent="$1"; shift
  case "${pretty}" in
    [yY]|[yY][eE][sS])
      printf "%${indent}s" '' >> "${HTMLFileName}"
      echo "$@" >> "${HTMLFileName}"
      ;;
    *)
      echo -n "$@" >> "${HTMLFileName}"
      ;;
    esac
}

# flush the HTML (add nl for non-pretty printed)
HTMLend()
{
  case "${pretty}" in
    [yY]|[yY][eE][sS])
    *)
      echo >> "${HTMLFileName}"
      ;;
    esac
}

# create archive only if not already done
MakeArchive()
{
  local archive="${1}.7z"; shift
  local dir="$1"; shift
  if [ -e "${archive}" -o -e "${archive}.001" ]
  then
    echo Skipping: ${archive}
  else
    echo Creating: ${archive} from: ${dir}
    7z a $@ "${archive}" "${dir}"
  fi
}

# get all directories
all_dirs=$(find . -mindepth 1 -maxdepth 1 -type d)

# verify critical files are present
echo checking: base
for f in kernel.elf textall.bmf forth.elf forth.ini sha256.txt version.txt
do
  [ -e "${f}" ] || ERROR file: ${f} not found
done
DirectoryCount=0
excludes=
for p in ${all_dirs}
do
  d=$(basename "${p}")
  excludes="${excludes} -x!'${d}'"
  echo checking: ${d}
  for f in wiki.nls wiki.ftr sha256.txt
  do
    [ -e "${d}/${f}" ] || ERROR file: ${f} not found
  done
  DirectoryCount=$((${DirectoryCount} + 1))
done

# prepare the base archive
version=$(awk '/^[[:space:]]*VERSION:/{print $2}' version.txt | head -n 1)
archive="${packages}/base-${version}"
eval MakeArchive "'${archive}'" '.' ${excludes}

HTMLoutput 0 '<ul>'

HTMLoutput 2 '<li>'
HTMLoutput 4 "<strong>Base Files</strong>&#8211;"
HTMLoutput 4 'direct: ('
part=0
for p in "${archive}"*
do
  part=$((${part} + 1))
  file=$(basename "${p}")
  HTMLoutput 4 '<a href="'${url}/${file}'">Part '${part}'</a>,'
done
HTMLoutput 4 '), torrent: ('
part=0
for p in "${archive}"*
do
  part=$((${part} + 1))
  file=$(basename "${p}")
  HTMLoutput 4 '<a href="'${url}/${file}'?torrent">Part '${part}'</a>,'
done
HTMLoutput 4 ')'
HTMLoutput 2 '</li>'


count=0
# process all pedia... directories
for p in ${all_dirs}
do
  count=$((${count} + 1))
  d=$(basename "${p}")
  version=$(head -n 1 "${d}/wiki.ftr")
  [ -z "${version}" ] && ERROR ${d}/wiki.ftr is invalid
  archive="${packages}/${d}-${version}"
  MakeArchive "${archive}" "${d}" "-v${size}"

  language=unknown
  type=unknown
  for s in ${all_types}
  do
    l1="${d%${s}}"
    if [ X"${d}" != X"${l1}" ]
    then
      language="${l1}"
      type="${s}"
      break
    fi
  done

  native_language=$(${nlsprint} "${language}")
  full_name=$(TypeToName "${type}")

  HTMLoutput 2 '<li>'
  HTMLoutput 4 "<strong>${native_language} ${full_name}</strong>&#8211;"
  HTMLoutput 4 'direct: ('
  part=0
  for p in "${archive}"*
  do
    part=$((${part} + 1))
    file=$(basename "${p}")
    HTMLoutput 4 '<a href="'${url}/${file}'">Part '${part}'</a>,'
  done
  HTMLoutput 4 '), torrent: ('
  part=0
  for p in "${archive}"*
  do
    part=$((${part} + 1))
    file=$(basename "${p}")
    HTMLoutput 4 '<a href="'${url}/${file}'?torrent">Part '${part}'</a>,'
  done
  HTMLoutput 4 ')'
  HTMLoutput 2 '</li>'

done

# end of HTML
HTMLoutput 0 '</ul>'
HTMLend