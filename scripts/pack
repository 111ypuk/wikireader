#!/bin/sh
# use 7zip to package the contents of image/*pedia

ERROR()
{
  echo error: $*
  exit 1
}

USAGE()
{
  [ -z "$1" ] || echo error: $*
  echo usage: $(basename "$0") '<options> [find_glob]'
  echo '       --help             -h         this message'
  echo '       --verbose          -v         more messages'
  echo '       --packages=<dir>   -p <dir>   directory for 7zipped files ['${packages}']'
  echo '       --image=<dir>      -i <dir>   image source directory ['${image}']'
  echo '       --url=<url>        -u <url>   base url for HTML file %s for language ['${url}']'
  echo '       --languages=<list> -l <list>  comma separated language prefixes ['${languages}']'
  echo '       --size=<n>         -s <n>     7zip splitting factor (number[kmg]) ['${size}']'
  echo '       --suffix=<text>    -S <text>  extra suffix after date for 7z files ['${suffix}']'
  echo '       --torrent=<y/n>    -t <y/n>   generate torrent links ['${torrent}']'
  echo '       --direct=<y/n>     -d <y/n>   generate direct links ['${direct}']'
  echo '       --pretty=<y/n>     -P <y/n>   pretty print the HTML ['${pretty}']'
  exit 1
}

# ListOfAllContentTypes, TypeToName, TypeToFilename
. "$(dirname "$0")/wiki-names.sh"


# defaults
nlsprint=$(readlink -m "$(dirname "$0")/../samo-lib/scripts/nls-print")
verbose=no
packages="packages/$(date '+%Y%m%d')"
image=image
url=http://%s.thewikireader.com/downloads
# note src_lang=dst_lang (e.g. cy=en  will place the cypedia in the en.XXX url
languages=en,cy=en
size=1g
pretty=yes
suffix=
torrent=no
direct=yes
debug=no

# process options
getopt=/usr/local/bin/getopt
[ -x "${getopt}" ] || getopt=getopt
args=$(${getopt} -o hvp:i:t:s:u:S:d:t:P: --long=help,verbose,packages:,image:,tracker:,url:,size:,suffix:,direct:,torrent:,pretty:,debug -- "$@") ||exit 1

# replace the arguments with the parsed values
eval set -- "${args}"

# yes/no options
yes_no()
{
  local option value
  option="$1"; shift
  value="$1"; shift
  case "${value}" in
    [yY]|[yY][eE][sS])
      eval "\${option}"=yes
      ;;
    [nN]|[nN][oO])
      eval "\${option}"=no
      ;;
    *)
      USAGE must be yes or no: ${option}=${value}
      ;;
  esac
}

# scan all options
while :
do
  case "$1" in
    -v|--verbose)
      verbose=yes
      shift
      ;;

    -p|--packages)
      packages="$2"
      shift 2
      ;;

    -i|--image)
      image="$2"
      shift 2
      ;;

    -u|--url)
      url="$2"
      shift 2
      ;;

    -S|--suffix)
      suffix="$2"
      shift 2
      ;;

    -d|--direct)
      yes_no direct "$2"
      shift 2
      ;;

    -t|--torrent)
      yes_no torrent "$2"
      shift 2
      ;;

    -s|--size)
      size="$2"
      shift 2
      ;;

    -P|--pretty)
      yes_no pretty "$2"
      shift 2
      ;;

    --debug)
      debug=yes
      shift
      ;;

    --)
      shift
      break
      ;;

    -h|--help)
      USAGE
      ;;

    *)
      USAGE invalid option: $1
      ;;
  esac
done

# verify arguments
[ -z "${packages}" ] && USAGE packages is not set
[ -z "${image}" ] && USAGE image is not set
[ -z "${url}" ] && USAGE url is not set
[ -z "${languages}" ] && USAGE languages is not set
[ -z "${size}" ] && USAGE size is not set
[ X"${direct}" = X"no" -a X"${torrent}" = X"no" ] && USAGE must set direct and/or torrent
[ $# -gt 1 ] && USAGE extraneous extra arguments

glob='*'
[ $# -eq 1 ] && glob="$1"

# absolute path to directories
packages=$(readlink -m "${packages}")
image=$(readlink -m "${image}")

# create and check directories directory
mkdir -p "${packages}"
[ -d "${packages}" ] || ERROR ${packages} is not a directory

cd "${image}" || ERROR image directory: ${image} not found

# split up languages so url_${lang}='http://...'
# and ensure there is an 'other' for the rest
# and create corresponding subdirectories
SAVE_IFS="${IFS}"
IFS=",${IFS}"
for l in ${languages} other
do
  src_l=${l%%=*}
  dst_l=${l##*=}
  u=$(printf "${url}" "${dst_l}")
  eval "url_${src_l}"="\${u}"
  packages_subdir="${packages}/${dst_l}"
  mkdir -p "${packages_subdir}"
  [ -d "${packages_subdir}" ] || ERROR ${packages_subdir} is not a directory
  eval "pkgdir_${src_l}"="\${packages_subdir}"
done
IFS="${SAVE_IFS}"

# setup for HTML output
HTMLFileName="${packages}/packages.html"
rm -f "${HTMLFileName}"

# output HTML
HTMLoutput()
{
  local indent
  indent="$1"; shift
  case "${pretty}" in
    [yY]|[yY][eE][sS])
      printf "%${indent}s" '' >> "${HTMLFileName}"
      echo "$@" >> "${HTMLFileName}"
      ;;
    *)
      echo -n "$@" >> "${HTMLFileName}"
      ;;
    esac
}

# flush the HTML (add nl for non-pretty printed)
HTMLend()
{
  case "${pretty}" in
    [yY]|[yY][eE][sS])
      ;;
    *)
      echo >> "${HTMLFileName}"
      ;;
    esac
}

# create archive only if not already done
MakeArchive()
{
  local archive="${1}.7z"; shift
  local dir="$1"; shift
  if [ -e "${archive}" -o -e "${archive}.001" ]
  then
    echo Skipping: ${archive}
  else
    echo Creating: ${archive} from: ${dir}
    7z a $@ "${archive}" "${dir}"
  fi
}

# create direct and/or torrent links
MakeLinks()
{
  local direct torrent p part file archive url
  direct="$1"; shift
  torrent="$1"; shift
  archive="$1"; shift
  url="$1"; shift

  if [ X"yes" = X"${direct}" ]
  then
    HTMLoutput 4 ' direct: ('
    part=0
    for p in "${archive}"*
    do
      file=$(basename "${p}")
      [ X"${file##*.}" = X"IGNORE" ] && continue
      part=$((${part} + 1))
      [ "${part}" -ne 1 ] &&  HTMLoutput 4 ', '
      HTMLoutput 4 '<a href="'${url}/${file}'">Part '${part}'</a>'
    done
    HTMLoutput 4 ')'
  fi

  if [ X"yes" = X"${torrent}" ]
  then
    HTMLoutput 4 ' torrent: ('
    part=0
    for p in "${archive}"*
    do
      file=$(basename "${p}")
      [ X"${file##*.}" = X"IGNORE" ] && continue
      part=$((${part} + 1))
      [ "${part}" -ne 1 ] &&  HTMLoutput 4 ', '
      HTMLoutput 4 '<a href="'${url}/${file}'?torrent">Part '${part}'</a>'
    done
    HTMLoutput 4 ')'
  fi
}


# get all directories
all_dirs=$(find . -mindepth 1 -maxdepth 1 -type d -print | sort -u)
selected_dirs=$(find . -mindepth 1 -maxdepth 1 -type d -name "${glob}" -print | sort -u)

# verify critical files are present
echo checking: base
for f in kernel.elf init.app wiki.app wiki.inf textall.bmf forth.elf forth.ini sha256.txt version.txt
do
  [ -e "${f}" ] || ERROR file: ${f} not found
done
excludes=
for p in ${all_dirs}
do
  d=$(basename "${p}")
  excludes="${excludes} -x!'${d}'"
  echo checking: ${d}
  for f in wiki.nls wiki.ftr sha256.txt
  do
    [ -e "${d}/${f}" ] || ERROR file: ${f} not found
  done
done

# prepare the base archive (always in en subdir)
version=$(awk '/^[[:space:]]*VERSION:/{print $2}' version.txt | head -n 1)
archive="${pkgdir_en}/base-${version}${suffix}"
eval MakeArchive "'${archive}'" '.' ${excludes}

HTMLoutput 0 '<ul>'

archive_date="$(basename "${archive}")"
archive_date="${archive_date#*-}"
HTMLoutput 2 '<li>'
HTMLoutput 4 "<strong>Base Files (${archive_date})</strong> &#8211;"

MakeLinks "${direct}" "${torrent}" "${archive}" "${url_en}"

HTMLoutput 2 '</li>'


# process the selected pedia... directories
for p in ${selected_dirs}
do
  d=$(basename "${p}")
  version=$(head -n 1 "${d}/wiki.ftr")
  [ -z "${version}" ] && ERROR ${d}/wiki.ftr is invalid

  language=unknown
  type=unknown
  for s in ${ListOfAllContentTypes}
  do
    l1="${d%${s}}"
    if [ X"${d}" != X"${l1}" ]
    then
      language="${l1}"
      type="${s}"
      break
    fi
  done

  native_language=$(${nlsprint} "${language}")
  if ! full_name=$(TypeToName "${type}")
  then
    full_name=unknown
  fi

  eval language_url=\"\${url_${language}}\"
  [ -z "${language_url}" ] && language_url="${url_other}"

  eval package_dir=\"\${pkgdir_${language}}\"
  [ -z "${package_dir}" ] && package_dir="${pkgdir_other}"

  archive="${package_dir}/${d}-${version}${suffix}"
  MakeArchive "${archive}" "${d}" "-v${size}"

  archive_date="$(basename "${archive}")"
  archive_date="${archive_date#*-}"
  HTMLoutput 2 '<li>'
  HTMLoutput 4 "<strong>${native_language} ${full_name} (${archive_date})</strong> &#8211;"

  MakeLinks "${direct}" "${torrent}" "${archive}" "${language_url}"

  HTMLoutput 2 '</li>'

done

# end of HTML
HTMLoutput 0 '</ul>'
HTMLend
