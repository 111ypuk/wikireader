#!/bin/sh
# show the status of stamp files and run programs on the rendering servers

ERROR()
{
  echo error: $*
  exit 1
}

USAGE()
{
  [ -z "$1" ] || echo error: $*
  echo usage: $(basename "$0") '<options>'
  echo '       --help            -h         this message'
  echo '       --work            -w         show work directory files'
  echo '       --simul           -2         switch to the other farm'
  echo '       --image           -i         show image directory files'
  echo '       --stamps          -s         show status of stamps'
  echo '       --analyse         -a         analyse the log file'
  echo '       --git             -g         run git pull --rebase'
  echo '       --process[=<n>]   -p[<n>]    show python/php processes cut line 1..n [unlimited]'
  echo '       --base=<dir>      -b <dir>   set the base directory [samo]'
  echo '       --tail[=<n>]      -t[<n>]    show last line of <base_dir>/log [3]'
  echo '       --memory          -m         show memory status'
  echo '       --list=<n-m>      -l <n-m>   restrict to certain machines [1-9]'
  echo '       --language=<xx>   -L <xx>    process for language [en]'
  echo '       --suffix=<s>      -S <s>     set the language suffix [pedia]'
  echo '       --run=<rl>        -r <rl>    multirun example rl = "en:pedia:wiki:YES:1:131072:10 de:::YES:32:200000"'
  echo '                                    start the Run script in a screen {index, parse, render}'
  echo '                                    (see the Run script for exact specifications)'
  echo '       --re-render=<rl>  -R <rl>    as --run but only does {render}'
  echo '       --re-index=<rl>   -I <rl>    as --run but only does {index}'
  echo '       --copy            -c         run the copy process i.e. {Copy --to=8 -l <lang>}'
  echo '       --combine         -k         run the combine process'
  echo '       --get[=<dir>]     -G[<dir>]  get the data files [image]'
  echo '       --sim4[=<dir>]    -4[<dir>]  install fonts, nls and run simulator [image]'
  echo '       --new-session     -N         start a new screen session for run and copy to use'
  echo '       --fetch-log       -f         fetch log files'
  echo '       --xml-link        -x         link wiki .xml file to latest version'
  echo '       --abort           -A         abort remote PHP/Python/make'
  exit 1
}

set_articles_link()
{
  case "${suffix}" in
    pedia)
      articles_link="${language}wiki-pages-articles.xml"
      ;;
    dict)
      articles_link="${language}wiktionary-pages-articles.xml"
      ;;
    quote)
      articles_link="${language}wikiquote-pages-articles.xml"
      ;;
    books)
      articles_link="${language}wikibooks-pages-articles.xml"
      ;;
    *)
      USAGE invalid suffix: ${suffix}, [pedia, dict, quote, books]
      ;;
  esac
}


# main program
# ------------

verbose=no
language=en
suffix=pedia
list=''
combine_host=8
base_dir=samo
render_host=
run_parallel=
set_articles_link

getopt=/usr/local/bin/getopt
[ -x "${getopt}" ] || getopt=getopt
args=$(${getopt} -o hvb:swigp::t::aml:L:S:r:R:I:ckG::4::NfxA2 --long=help,verbose,base:,stamps,work,image,git,process::,tail::,analyse,memory,list:,language:,suffix:,run:,re-render:,re-index:,copy,combine,get::,sim4::,new-session,fetch-log,xml-link,abort,simul -- "$@") || exit 1
# replace the arguments with the parsed values
eval set -- "${args}"

while :
do
  case "$1" in
    -v|--verbose)
      verbose=yes
      shift
      ;;

    -2|--simul)
      combine_host="3"
      render_host='--host=simul3'
      run_parallel="--machines=3 --parallel=12"
      shift
      ;;

    -b|--base)
      base_dir="$2"
      shift 2
      ;;

    -s|--stamps)
      RenderDo --yes ${render_host} ${list} --brief --post='sed s/stamp-//g' "cd '${base_dir}/work/${language}${suffix}'"' && printf "\33[34;1m%s\33[0;m " stamp* && echo'
      shift
      ;;

    -w|--work)
      RenderDo --yes ${render_host} ${list} --brief "cd '${base_dir}' && ls -l 'work/${language}${suffix}'"
      shift
      ;;

    -N|--new-session)
      for host in $(RenderDo ${render_host} ${list} --print-list)
      do
        StartScreen --cd="${base_dir}" "${host}"
      done
      shift
      ;;

    -r|--run)
      run_list=$(echo $2 | sed 's/,/ /g')
      c="scripts/Run ${run_parallel} --clear ${run_list}"
      RenderDo --yes ${render_host} ${list} --brief "screen -X eval chdir 'chdir ${base_dir}' \"exec ${c}\""
      shift 2
      ;;

    -R|--re-render)
      run_list=$(echo $2 | sed 's/,/ /g')
      c="scripts/Run ${run_parallel} --re-render ${run_list}"
      RenderDo --yes ${render_host} ${list} --brief "screen -X eval chdir 'chdir ${base_dir}' \"exec ${c}\""
      shift 2
      ;;

    -I|--re-index)
      run_list=$(echo $2 | sed 's/,/ /g')
      c="scripts/Run ${run_parallel} --index-only ${run_list}"
      RenderDo --yes ${render_host} ${list} --brief "screen -X eval chdir 'chdir ${base_dir}' \"exec ${c}\""
      shift 2
      ;;

    -c|--copy)
      c="scripts/Copy --base='${base_dir}' --to='${combine_host}' --language='${language}' --suffix='${suffix}'"
      RenderDo --yes ${render_host} ${list} --brief "screen -X eval chdir 'chdir ${base_dir}' \"exec ${c}\""
      shift
      ;;

    -i|--image)
      RenderDo --yes ${render_host} ${list} --brief "cd '${base_dir}' && ls -l 'image/${language}${suffix}'"
      shift
      ;;

    -f|--fetch-log)
      for host in $(RenderDo ${render_host} ${list} --print-list)
      do
        lf="${host}-${language}-${suffix}.log"
        echo fetch log from: ${host} to: ${lf}
        RenderDo --yes ${render_host} --list="${host##*[^0-9]}" "cat '${base_dir}/${language}-${suffix}.log'" > "${lf}"
      done
      shift
      ;;

    -g|--git)
      RenderDo --yes ${render_host} ${list} --verbose "cd '${base_dir}' && git checkout . && git pull --rebase"
      shift
      ;;

    -p|--process)
      if [ -n "$2" ]
      then
        RenderDo --yes ${render_host} ${list} --brief --post="cut -b 1-$2" 'echo;ps -o pid,cmd -u wr --forest'
      else
        RenderDo --yes ${render_host} ${list} --brief 'echo;ps -o pid,cmd -u wr --forest'
      fi
      shift 2
      ;;

    -t|--tail)
      t=3
      [ -n "$2" ] && t="$2"
      RenderDo --yes ${render_host} ${list} --brief "tail -n '${t}' '${base_dir}'/${language}-${suffix}.log"
      shift 2
      ;;

    -a|--analyse)
      RenderDo --yes ${render_host} ${list} --brief "cd '${base_dir}' && ./scripts/AnalyseLog '${language}-${suffix}.log'"
      shift
      ;;

    -m|--memory)
      RenderDo --yes ${render_host} ${list} --brief 'echo Memory Status \(Megabytes\); free -m'
      shift
      ;;

    -k|--combine)
      RenderDo --yes ${render_host} --list="${combine_host}" --brief "cd '${base_dir}' && make VERBOSE='${verbose}' WORKDIR='work' DESTDIR='image' WIKI_FILE_PREFIX=wiki  WIKI_DIR_SUFFIX='${suffix}' WIKI_LANGUAGE='${language}' EXTRACT_VERSION_FROM='${articles_link}' print-WIKI_VERSION combine"
      shift
      ;;

    -l|--list)
      list="--list=$2"
      shift 2
      ;;

    -L|--language)
      language="$2"
      shift 2
      set_articles_link
      ;;

    -S|--suffix)
      suffix="$2"
      shift 2
      set_articles_link
      ;;

    -G|--get)
      dest=image
      if [ -n "$2" ]
      then
        dest="$2"
        [ -e "${dest}" ] || mkdir -p "${dest}"
        [ -d "${dest}" ] || USAGE ${dest} is not a directory
      fi
      h=$(RenderDo ${render_host} --list="${combine_host}" --print-list | head -n 1)
      rsync -cavHx --progress --exclude='*-tmp' "wr@${h}:${base_dir}/image/${language}${suffix}" "${dest}/"
      shift 2
      ;;

    -4|--sim4)
      dest=image
      if [ -n "$2" ]
      then
        dest="$2"
        [ -e "${dest}" ] || mkdir -p "${dest}"
        [ -d "${dest}" ] || USAGE ${dest} is not a directory
      fi
      # attempt to find a directory to set the language/suffix
      # in case that enpedia does not exist
      first_dir=$(find "${dest}" -maxdepth 1 -mindepth 1 -type d -print -quit)
      [ -d "${first_dir}" ] || USAGE ${first_dir} is not a directory
      l1=en
      s1=pedia
      first_dir=$(basename "${first_dir}")
      for s in books dict pedia quote
      do
        l0="${first_dir%${s}}"
        if [ X"${first_dir}" != X"${l0}" ]
        then
          l1="${l0}"
          s1="${s}"
          break
        fi
      done
      make DESTDIR="${dest}" WIKI_LANGUAGE="${l1}" WIKI_DIR_SUFFIX="${s1}" nls-install fonts-install sim4
      shift 2
      ;;

    -x|--xml-link)
      for s in wiki wiktionary wikiquote wikibooks
      do
        RenderDo --yes ${render_host} ${list} --brief "cd '${base_dir}' &&
 rm -f '${language}${s}-pages-articles.xml' &&
 f=\$(ls -1 ../'${language}${s}'-*-pages-articles.xml 2>/dev/null | tail -n 1) &&
 [ -n \"\${f}\" ] &&
 ln -fs \"\${f}\" '${language}${s}-pages-articles.xml' &&
 ls -l '${language}${s}'-pages-articles.xml"
      done
      shift
      ;;

    -A|--abort)
      RenderDo --yes ${render_host} ${list} --brief 'killall php python make'
      shift
      ;;

    --)
      shift
      break
      ;;

    -h|--help)
      USAGE
      ;;

    *)
      USAGE invalid option: $1
      ;;
  esac
done

echo
echo completed
