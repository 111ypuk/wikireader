#!/bin/sh
# aside from this initial boilerplate, this is actually -*- scheme -*- code
main='(module-ref (resolve-module '\''(scripts script-entry-point)) '\'main')'
exec ${GUILE-guile} -l $0 -c "(apply $main (command-line))" "$0" "$@"
!#

;;; nls-print - print the name of a language from its code
;;;
;;; Copyright (c) 2010 Openmoko Inc.
;;;
;;; Authors   Christopher Hall <hsw@openmoko.com>
;;;
;;; This program is free software: you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation, either version 3 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program.  If not, see <http://www.gnu.org/licenses/>.


(define-module (scripts script-entry-point)
  :use-module (ice-9 getopt-long)
  :use-module (ice-9 rdelim)
  :use-module (ice-9 regex)
  :use-module (srfi srfi-1)
  :export (script-entry-point))

(define-macro (unless cond . body)
  `(if (not ,cond) (begin ,@body)))

(define *program* "program-name-here")
(define *debug* #f)
(define *verbose* #f)

(define (usage message)
  "Display a usage message"
  (if (string? message)
      (format #t "error: ~a~%" message))
  (format #t "usage: ~a [--verbose] [--debug] [--english] <code>~%" *program*)
  (exit 1))


(define (main . args)
  "Main program"
  (set! *program* (second args))
   (let* ((parsed-opts (getopt-long (drop args 1)
                                   '((help (single-char #\h))
                                     (english (single-char #\e))
                                     (verbose (single-char #\v))
                                     (debug (single-char #\d)))))
         (=h (option-ref parsed-opts 'help #f))
         (=e (option-ref parsed-opts 'english #f))
         (*verbose* (option-ref parsed-opts 'verbose #f))
         (*debug* (option-ref parsed-opts 'debug #f))
         (inputs (drop (first parsed-opts) 1)))
    (if =h (usage '()))
    (if *debug*
        (begin
          (format #t "parsed opts = ~a~%" parsed-opts)
          (format #t "non-option args = ~a~%" inputs)
          (format #t "english flag = ~a~%" =e)))
    (unless (= 1 (length inputs)) (usage "exactly one code argument is required"))

    (let* ((language-data (string-join (list (dirname *program*) "nls-data") "/"))
           (language-names (with-input-from-file language-data (lambda () (read))))
           (l (find-language (string-downcase (first inputs)) language-names)))
      (if l
          (if =e
              (format #t "~a~%" (first l))
              (format #t "~a~%" (second l)))))
))


(define (find-language code lang)
  "search the list of languages"
  (cond
   ((eq? '() lang) '("UNKNOWN" "UNKNOWN"))
   ((equal? code (first (first lang))) (drop (first lang) 1))
   (#t (find-language code (drop lang 1)))))
