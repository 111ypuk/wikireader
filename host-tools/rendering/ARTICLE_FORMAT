= Encoding of an Article/Page/HTML Page =

Instead of plain text we store it in a pre rendered format that
should be space efficient.

This includes huffman codes for:
    - fonts
    - x,y movement
    - glyphs
    - glyphs for bigrams

= Representation =

 struct header {
    int nr_fonts;
    struct huffman_tree {
        int32_t value;
        int16_t left_index;
        int16_t right_index;
    }[nr_fonts];

    int nr_glyphs;
    struct huffman_tree {
        int32_t value;
        int16_t left_index;
        int16_t right_index;
    }[nr_glyphs];

    int nr_x;
    struct huffman_tree {
        int32_t value;
        int16_t left_index;
        int16_t right_index;
    }[nr_x];

    int nr_y;
    struct huffman_tree {
        int32_t value;
        int16_t left_index;
        int16_t right_index;
    }[nr_y];

    int nr_length;
    struct huffman_tree {
        int32_t value;
        int16_t left_index;
        int16_t right_index;
    }[nr_length];
 };

The bigrams and glyphs are coming from the same huffman code. It is not yet decided how
to remember how many bits of the code_word are actually used...

this is followed by the stream of the article... this is not yet settled and
is subject to change. For now we have two code words

0 <font codeword>
1 nr_glyphs <x codeword><y codeword><glyph codeword><glyph codeword>
